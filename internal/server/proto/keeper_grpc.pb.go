// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: internal/server/proto/keeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ItemKeeper_RegUser_FullMethodName            = "/item_keeper.ItemKeeper/RegUser"
	ItemKeeper_AuthUser_FullMethodName           = "/item_keeper.ItemKeeper/AuthUser"
	ItemKeeper_PutItems_FullMethodName           = "/item_keeper.ItemKeeper/PutItems"
	ItemKeeper_UploadFile_FullMethodName         = "/item_keeper.ItemKeeper/UploadFile"
	ItemKeeper_UpdateByLastUpdate_FullMethodName = "/item_keeper.ItemKeeper/UpdateByLastUpdate"
	ItemKeeper_GetFileByFileID_FullMethodName    = "/item_keeper.ItemKeeper/GetFileByFileID"
	ItemKeeper_DeleteEntity_FullMethodName       = "/item_keeper.ItemKeeper/DeleteEntity"
)

// ItemKeeperClient is the client API for ItemKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemKeeperClient interface {
	RegUser(ctx context.Context, in *RegUserRequest, opts ...grpc.CallOption) (*RegUserResponse, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
	PutItems(ctx context.Context, in *PutItemsRequest, opts ...grpc.CallOption) (*PutItemsResponse, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	UpdateByLastUpdate(ctx context.Context, in *UpdateByLastUpdateRequest, opts ...grpc.CallOption) (*UpdateByLastUpdateResponse, error)
	GetFileByFileID(ctx context.Context, in *GetFileByFileIDRequest, opts ...grpc.CallOption) (*GetFileByFileIDResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error)
}

type itemKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewItemKeeperClient(cc grpc.ClientConnInterface) ItemKeeperClient {
	return &itemKeeperClient{cc}
}

func (c *itemKeeperClient) RegUser(ctx context.Context, in *RegUserRequest, opts ...grpc.CallOption) (*RegUserResponse, error) {
	out := new(RegUserResponse)
	err := c.cc.Invoke(ctx, ItemKeeper_RegUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemKeeperClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, ItemKeeper_AuthUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemKeeperClient) PutItems(ctx context.Context, in *PutItemsRequest, opts ...grpc.CallOption) (*PutItemsResponse, error) {
	out := new(PutItemsResponse)
	err := c.cc.Invoke(ctx, ItemKeeper_PutItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemKeeperClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, ItemKeeper_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemKeeperClient) UpdateByLastUpdate(ctx context.Context, in *UpdateByLastUpdateRequest, opts ...grpc.CallOption) (*UpdateByLastUpdateResponse, error) {
	out := new(UpdateByLastUpdateResponse)
	err := c.cc.Invoke(ctx, ItemKeeper_UpdateByLastUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemKeeperClient) GetFileByFileID(ctx context.Context, in *GetFileByFileIDRequest, opts ...grpc.CallOption) (*GetFileByFileIDResponse, error) {
	out := new(GetFileByFileIDResponse)
	err := c.cc.Invoke(ctx, ItemKeeper_GetFileByFileID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemKeeperClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error) {
	out := new(DeleteEntityResponse)
	err := c.cc.Invoke(ctx, ItemKeeper_DeleteEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemKeeperServer is the server API for ItemKeeper service.
// All implementations must embed UnimplementedItemKeeperServer
// for forward compatibility
type ItemKeeperServer interface {
	RegUser(context.Context, *RegUserRequest) (*RegUserResponse, error)
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	PutItems(context.Context, *PutItemsRequest) (*PutItemsResponse, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	UpdateByLastUpdate(context.Context, *UpdateByLastUpdateRequest) (*UpdateByLastUpdateResponse, error)
	GetFileByFileID(context.Context, *GetFileByFileIDRequest) (*GetFileByFileIDResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error)
	mustEmbedUnimplementedItemKeeperServer()
}

// UnimplementedItemKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedItemKeeperServer struct {
}

func (UnimplementedItemKeeperServer) RegUser(context.Context, *RegUserRequest) (*RegUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegUser not implemented")
}
func (UnimplementedItemKeeperServer) AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedItemKeeperServer) PutItems(context.Context, *PutItemsRequest) (*PutItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutItems not implemented")
}
func (UnimplementedItemKeeperServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedItemKeeperServer) UpdateByLastUpdate(context.Context, *UpdateByLastUpdateRequest) (*UpdateByLastUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByLastUpdate not implemented")
}
func (UnimplementedItemKeeperServer) GetFileByFileID(context.Context, *GetFileByFileIDRequest) (*GetFileByFileIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByFileID not implemented")
}
func (UnimplementedItemKeeperServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedItemKeeperServer) mustEmbedUnimplementedItemKeeperServer() {}

// UnsafeItemKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemKeeperServer will
// result in compilation errors.
type UnsafeItemKeeperServer interface {
	mustEmbedUnimplementedItemKeeperServer()
}

func RegisterItemKeeperServer(s grpc.ServiceRegistrar, srv ItemKeeperServer) {
	s.RegisterService(&ItemKeeper_ServiceDesc, srv)
}

func _ItemKeeper_RegUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemKeeperServer).RegUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemKeeper_RegUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemKeeperServer).RegUser(ctx, req.(*RegUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemKeeper_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemKeeperServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemKeeper_AuthUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemKeeperServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemKeeper_PutItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemKeeperServer).PutItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemKeeper_PutItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemKeeperServer).PutItems(ctx, req.(*PutItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemKeeper_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemKeeperServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemKeeper_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemKeeperServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemKeeper_UpdateByLastUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByLastUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemKeeperServer).UpdateByLastUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemKeeper_UpdateByLastUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemKeeperServer).UpdateByLastUpdate(ctx, req.(*UpdateByLastUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemKeeper_GetFileByFileID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByFileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemKeeperServer).GetFileByFileID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemKeeper_GetFileByFileID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemKeeperServer).GetFileByFileID(ctx, req.(*GetFileByFileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemKeeper_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemKeeperServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemKeeper_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemKeeperServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemKeeper_ServiceDesc is the grpc.ServiceDesc for ItemKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item_keeper.ItemKeeper",
	HandlerType: (*ItemKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegUser",
			Handler:    _ItemKeeper_RegUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _ItemKeeper_AuthUser_Handler,
		},
		{
			MethodName: "PutItems",
			Handler:    _ItemKeeper_PutItems_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _ItemKeeper_UploadFile_Handler,
		},
		{
			MethodName: "UpdateByLastUpdate",
			Handler:    _ItemKeeper_UpdateByLastUpdate_Handler,
		},
		{
			MethodName: "GetFileByFileID",
			Handler:    _ItemKeeper_GetFileByFileID_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _ItemKeeper_DeleteEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/server/proto/keeper.proto",
}
